<?xml version="1.0" encoding="utf-8" ?>
<project xmlns:ivy="antlib:org.apache.ivy.ant" name="MyProject" basedir="." xmlns:jacoco="antlib:org.jacoco.ant">
	<property name="ivy.install.version" value="2.1.0-rc2" />
	<!-- You may place ivy.jar into other folder if you want to keep folder lib clean-->
	<property name="ivy.jar.dir" value="lib/ivyLib" />
	<property name="ivy.jar.file" value="${ivy.jar.dir}/ivy.jar" />

	<property name="src" location="src/main/tasks/n5" />
	<property name="test" location="src/test" />
	<property name="build" location="target/production" />
	<property name="buildtest" location="target/test" />
	<property name="jarDestDir" location="jarFile" />

	<path id="internal.classpath">
		<pathelement location="lib/interfaces-2.0.2.jar" />
		<pathelement location="lib/junit-4.10.jar" />
		<pathelement location="lib/log4j-1.2.16.jar" />
		<pathelement location="lib/slf4j-api-1.6.1.jar" />
		<pathelement location="lib/slf4j-log4j12-1.6.0.jar" />
		<pathelement location="lib/checkstyle-8.16-all.jar" />
		<pathelement location="target/production" />
		<pathelement location="target/test" />
	</path>

	<target name="clean">
		<delete dir="reports" />
		<delete dir="target" />
		<delete dir="jarFile" />
	</target>

	<target name="init" depends="clean">
		<mkdir dir="reports" />
		<mkdir dir="${build}" />
		<mkdir dir="${buildtest}" />
	</target>

	<target name="compile" depends="init">
		<javac srcdir="${src}" destdir="${build}" includeantruntime="false">
			<compilerarg value="-Xlint:unchecked" />
			<classpath refid="internal.classpath" />
		</javac>
	</target>

	<target name="testcompile" depends="compile">
		<javac srcdir="${test}" destdir="${buildtest}" includeantruntime="false">
			<compilerarg value="-Xlint:unchecked" />
			<classpath refid="internal.classpath" />
		</javac>

	</target>

	<target name="test" depends="testcompile">
		<junit showoutput="yes" printsummary="yes" haltonfailure="no">
			<classpath refid="internal.classpath" />
			<formatter type="xml" />
			<batchtest todir="reports">
				<fileset dir="${buildtest}">
				</fileset>
			</batchtest>
		</junit>
	</target>

	<target name="jar" depends="testcompile">
		<mkdir dir="${jarDestDir}" />
		<jar destfile="${jarDestDir}/myproject.jar" basedir="target">
		</jar>
	</target>

	<!-- Checkstyle -->

	<!-- Run this sample with ant checkstyle and you will recieve checkstyle_report.xml 
     file with one violation of ReturnNullInsteadOfBoolean check -->
	<!-- ##########################################################################
     ####################### target: checkstyle ###############################
     ########################################################################## -->
	<target name="checkstyle" description="Generates a report of code convention violations." depends="init-checkstyle">
		<!-- See http://checkstyle.sourceforge.net/anttask.html for full options of using checkstyle with ant-->
		<checkstyle config="checkstyle.xml" failureProperty="checkstyle.failure" failOnViolation="false">
			<formatter type="xml" tofile="reports/checkstyle_report.xml" />
			<fileset dir="src" includes="**/*.java" />
		</checkstyle>
	</target>

	<target name="init-checkstyle" depends="resolve">
		<path id="checkstyle.lib.path">
			<fileset dir="lib" includes="*.jar" />
		</path>
		<!-- Sevntu custom checks are retrieved by Ivy into lib folder and will be accessible to checkstyle-->
		<taskdef resource="com/puppycrawl/tools/checkstyle/ant/checkstyle-ant-task.properties" classpathref="checkstyle.lib.path" />
	</target>


	<!-- ##########################################################################
     ####################### target: resolve ##################################
     ########################################################################## -->
	<target name="resolve" description="retrieve dependencies with ivy" depends="init-ivy">
		<ivy:settings file="ivysettings.xml" />
		<ivy:retrieve />
	</target>


	<!-- ##########################################################################
     ####### Downloading and setup Ivy for managing dependencies ##############
     ##########################################################################-->

	<target name="download-ivy" unless="offline">

		<mkdir dir="${ivy.jar.dir}" />
		<!-- download Ivy from web site so that it can be used even without any special installation -->
		<get src="http://repo2.maven.org/maven2/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar" dest="${ivy.jar.file}" usetimestamp="true" />
	</target>

	<target name="init-ivy" depends="download-ivy">
		<!-- try to load ivy here from ivy home, in case the user has not already dropped
              it into ant's lib dir (note that the latter copy will always take precedence).
              We will not fail as long as local lib dir exists (it may be empty) and
              ivy is in at least one of ant's lib dir or the local lib dir. -->
		<path id="ivy.lib.path">
			<fileset dir="${ivy.jar.dir}" includes="*.jar" />
		</path>

		<taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path" />
	</target>

	<!-- PMD -->
	<property name="pmd.home.dir" location="${basedir}/lib/pmd/" />
	<property name="src.dir" location="${basedir}/src" />
	<!-- -->
	<path id="pmd2.classpath">
		<pathelement location="${build}" />
		<fileset dir="${pmd.home.dir}/lib/">
			<include name="*.jar" />
		</fileset>
	</path>

	<taskdef name="pmd" classname="net.sourceforge.pmd.ant.PMDTask" classpathref="pmd2.classpath" />
	<target name="pmd">
		<pmd>
			<formatter type="xml" toFile="reports/pmd_report.xml" />
			<ruleset>lib/rulesets/design.xml</ruleset>
			<ruleset>lib/rulesets/imports.xml</ruleset>
			<ruleset>lib/rulesets/j2ee.xml</ruleset>
			<ruleset>lib/rulesets/javabeans.xml</ruleset>
			<ruleset>lib/rulesets/basic.xml</ruleset>
			<!-- references file in PMD's .jar -->
			<fileset dir="${src.dir}">
				<include name="**/*.java" />
			</fileset>
		</pmd>
	</target>


	<!-- findBugs -->

	<taskdef name="findbugs" classname="edu.umd.cs.findbugs.anttask.FindBugsTask" classpath="lib/findbugs.jar" />

	<!-- для выполнения цели findbugs джава файлы дб скомпилированы -->
	<target name="findbugs" depends="jar">
		<findbugs home="lib/findbugs-3.0.1" output="xml:withMessages" outputFile="reports/findbugsReport.xml">
			<auxClasspath path="${basedir}/lib/regex.jar" />
			<sourcePath path="${basedir}/src/main" />
			<class location="${basedir}/target" />
		</findbugs>
	</target>

	<!-- JaCoCo -->

	<taskdef uri="antlib:org.jacoco.ant" resource="org/jacoco/ant/antlib.xml">
		<classpath path="lib/jacocoant.jar" />
	</taskdef>

	<target name="jacoco" depends="testcompile">
		<jacoco:coverage>
			<junit fork="true" showoutput="yes" printsummary="yes" haltonfailure="no">
				<classpath refid="internal.classpath" />
				<formatter type="xml" />
				
				<batchtest todir="reports">
					<fileset dir="${buildtest}">
					</fileset>
				</batchtest>
			</junit>
		</jacoco:coverage>
		<jacoco:report>

			<executiondata>
				<file file="jacoco.exec" />
			</executiondata>

			<structure name="MyProject">
				<classfiles>
					<fileset dir="target" />
				</classfiles>
				<sourcefiles encoding="UTF-8">
					<fileset dir="src" />
				</sourcefiles>
			</structure>

			<html destdir="reports" />

		</jacoco:report>
	</target>
	
	<target name="all" depends="jar, test, findbugs, jacoco, checkstyle, pmd">
	
	</target>

</project>